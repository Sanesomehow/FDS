
#include <stdio.h>
#include<stdlib.h>

struct abc
{
    int data;
    struct abc *left;
    struct abc *right;
};

struct abc * create(int d)
{
    struct abc *new;
    new = (struct abc *)malloc(sizeof(struct abc));
    new -> data = d;
    new -> left = NULL;
    new -> right = NULL;
    return new;
}

struct abc * insert(struct abc *root, int d)
{
    if(root == NULL)
    {
        return create(d);
    }
    else if(d < root->data)
    {
        root->left = insert(root->left,d);
    }
    else
    {
        root -> right = insert(root->right,d);
    }
}


void inorder(struct abc * root)
{
    if(root == NULL)
    {
        return;
    }
    else
    {
        if (root != NULL)
        {
            inorder(root -> left);
            printf("\n%d", root->data);
            inorder(root -> right);
        }
    }
}

struct abc * search(struct abc * root, int d)
{
    if(root == NULL)
    {
        return root;
    }
    else if(d == root->data)
    {
        printf("\nData is found");
    }
    else if(d < root->data)
    {
        root->left = search(root->left, d);
    }
    else
    {
        root->right = search(root->right, d);
    }
}

int main()
{
    int ch, d, y;
    struct abc * root = NULL;
    do{
        printf("1.Insert\n2.Search\n3.Inorder tree traversal");
        printf("\nEnter choice: ");
        scanf("%d", &ch);
        
        switch(ch)
        {
            case 1: printf("\nEnter data: ");
                    scanf("%d", &d);
                    insert(root, d);
                    break;
            
            case 2: printf("\nEnter data to search: ");
                    scanf("%d", &d);
                    search(root, d);
                    break;
                    
            case 3: printf("\nTree traversal Inorder");
                    inorder(root);
                    break;
        }
        printf("\nDo you want to continue: 1.YES\t 2.NO: ");
        scanf("%d", &y);
    }while(y == 1);
}
