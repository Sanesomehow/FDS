#include <stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<math.h>

/* INFIX TO POSTFIX*/

struct stack{
    char ele;
    struct stack*next;
};
void push(int);
int pop();
int precedence(char);
int evaluate();
int pop1();
int push1();

struct stack *top=NULL;
int stack1[20], top1 = -1;

int main()
{
    char infix[20],postfix[20];
    int i=0,j=0;
    printf("Enter the infix expression\n");
    scanf("%s",infix);
   
    while(infix[i]!='\0'){
        if(isalnum(infix[i]))
        {
        // postfix[j++] = infix[i];
        postfix[j] = infix[i];
        j++;
        }
        else{
            if(top==NULL)
            push(infix[i]);
            else
            {
                while(top!=NULL && (precedence(top->ele)>= precedence(infix[i])))
                {
                    // postfix[j++]=pop();
                    postfix[j] = pop();
                    j++;
                }
                push(infix[i]);
            }
        }
        i++;
    }
    while(top!=NULL)
    {
        //postfix[j++]= pop();
        postfix[j] = pop();
        j++;
    }
    postfix[j]='\0';
    printf("%s",postfix);
    evaluate(postfix);

    return 0;
}
int precedence(char x)
{
    switch(x)
    {
        case'^':return 3;
        case'*':
        case'/':return 2;
        case'+':
        case'-':return 1;
       
        defult:return 0;
    }
}
void push(int x){
    int item;
    struct stack *temp;
    temp=(struct stack*)malloc(sizeof(struct stack));
    temp->ele=x;
   
    if(top==NULL)
    {
        top=temp;
    }
    else{
        temp->next=top;
        top=temp;
    }
}
int pop()
{
    struct stack *tmp;
    char item;
     
    if(top==NULL)
    printf("empty stack");
     
    else if (top->next==NULL)
    {
        tmp=top;
        item=top->ele;
        top=NULL;
        free(tmp);
    }
    else
    {
        tmp=top;
        item=top->ele;
        top=top->next;
        free(tmp);          
    }
    return item;
}
int evaluate(char postfix[])
{
    int i=0;
    int num, n1, n2, n3;
    
    while(postfix[i] != '\0')
    {
        if(isdigit(postfix[i]))
        {
            num = postfix[i] - 48;
            push1(num);
        }
        else
        {
            n1 = pop1();
            n2 = pop1();
            
            switch(postfix[i])
            {
                case'^':
                    n3 = pow(n2,n1);
                    push1(n3);
                    break;
                case'*':
                    n3 = n2*n1;
                    push1(n3);
                    break;
                case'/':
                    n3 = n2/n1;
                    push1(n3);
                    break;
                case'+':
                    n3 = n2+n1;
                    push1(n3);
                    break;
                case'-':
                    n3 = n2-n1;
                    push1(n3);
                    break;
       
                defult:return 0;
            }
        }
        i++;
    }
    printf("\nAnswer is %d",pop1());
    

}

int push1(int op)
    {
        top1++;
        stack1[top1] = op;
    }
    
int pop1()
    {
        int e;
        e = stack1[top1];
        top1--;
        return e;
    }
    
